package lecture6Set;
/*
1. Иерархия Set и определения
2. Обзор функционала HashSet
3. Обзор функционала LinkedHashSet
4. Обзор функционала SortedSet
5. Дерево в программировании
6. Обзор функционала TreeSet
7. Введение в создание собственных типов
8. equals, hashCode, compareTo и их назначение

                                SET
    ● Коллекции, содержащие уникальные элементы.
    ● Быстрая работа с данными.
    ● «Основан» на Map’ах без пары.
    ● Порядок добавления не хранится.

                              HASHSET
isEmpty() – проверка на пустоту.
add(V) – добавление элемента в коллекцию.
remove(V) – удаление элемента из коллекцию.
contains(V) – проверка на включение элемента в коллекции.
clear() – удаление всех элементов коллекции.
size() – возвращает количество элементов коллекции.

                    HashSet как синоним множества
addAll(Coll) – объединение множеств.
retainAll(Coll) – пересечение множеств.
removeAll(Coll) – разность множеств.


                          TreeSet
● В основе HashMap.
● Упорядочен по возрастанию. Или самим создать comparator для упорядочивания
● null’ов быть не может.

first()
last()
headSet(E)
tailSet(E)
subSet(E1, E2)

                      LinkedHashSet
● В основе HashMap.
● Помнит порядок.
Использовать, когда нужен HashSet с запоминанием порядка элемента.

isEmpty() – проверка на пустоту.
add(V) – добавление элемента в коллекцию.
remove(V) – удаление элемента из коллекцию.
contains(V) – проверка на включение элемента в коллекции.
clear() – удаление всех элементов коллекции.
size() – возвращает количество элементов коллекции.

 */
public class PlanLectures6 {
}
